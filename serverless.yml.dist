#
# This file is part of the ONEMA onema Package.
# For the full copyright and license information,
# please view the LICENSE file that was distributed
# with this source code.
#
# copyright (c) 2017, Juan Manuel Torres (http://onema.io)
#
# @author Juan Manuel Torres <software@onema.io>
#
service: serverless-test

provider:
  name: aws
    runtime: java8
  #  profile: ${opt:profile, 'default'}
    timeout: 30
    versionFunctions: false
    memorySize: 1024
    stage: dev
    region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements: ${file(infrastructure/global-values.yml):iamRoleStatements}

  # Service wide environment variables
  environment:

    # This is used by the configuration providers
    STAGE_NAME: ${self:custom.stageName}

    # The error topic is part of the bootstrap infrastructure for uServerless
    SNS_ERROR_TOPIC: ${file(infrastructure/global-values.yml):environment.SNS_ERROR_TOPIC}

# Usage plan and API keys
#  apiKeys:
#    - ${opt:stage}-cloud-platform-user-key
#  usagePlan:
#    quota:
#
#      # There isn't an option to give this a custom name
#      limit: 100000
#      period: MONTH
# you can define service wide environment variables here

# Custom values. These can be referenced in the Cloud Formation template
custom: ${file(infrastructure/global-values.yml):custom}

# you can add packaging information here
# Make sure to run "sbt assembly" to create a jar file
# with all your dependencies and put that jar file name here.
package:
  artifact: target/scala-2.12/app.jar

functions:
  # API Gateway functions
  success:
    handler: functions.success.Function::lambdaHandler
    # the DLQ is part of the bootstrap infrastructure for uServerless
    onError: ${file(infrastructure/global-values.yml):deadLetterQueue}
    events:
      - http:
          path: success
          method: get
      # Warmup Event
      - schedule:
          rate: rate(5 minutes)
          input:
            warmup: true

  # SNS Processing functions
  process:
    handler: functions.process.Function::lambdaHandler
    # the DLQ is part of the bootstrap infrastructure for uServerless
    onError: ${file(infrastructure/global-values.yml):deadLetterQueue}
    events:
      - sns: ${self:custom.stageName}-processing-function

# you can add CloudFormation resource templates here
#resources:
#  Parameters: ${file(infrastructure/custom-resources_cfn.yml):Parameters}
#  Resources: ${file(infrastructure/custom-resources_cfn.yml):Resources}
