<configuration>

    <!--Appender for every log message except errors, uses the logstash encoder to report logs as json, custom properties
    are added to each log request including the stage name, lambda version and function name.-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <Target>System.out</Target>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{"type":"log","stage":"${STAGE_NAME}","function":"${AWS_LAMBDA_FUNCTION_NAME}","lambda_version":"${AWS_LAMBDA_FUNCTION_VERSION}"}</customFields>
            <prefix class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <pattern>*** %-6level:</pattern>
                </layout>
            </prefix>
        </encoder>
    </appender>

    <!--Custom appender to report metrics, similar to the STDOUT, but it marks it at a METRIC.-->
    <appender name="METRIC" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{"type":"metric","stage":"${STAGE_NAME}","function":"${AWS_LAMBDA_FUNCTION_NAME}","lambda_version":"${AWS_LAMBDA_FUNCTION_VERSION}"}</customFields>
            <prefix class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <pattern>*** METRIC:</pattern>
                </layout>
            </prefix>
        </encoder>
    </appender>

    <!--Error appender logs structured error messages reported by ÂµServerless -->
    <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
        <Target>System.err</Target>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>*** %-6level: %msg%n</pattern>
        </encoder>
    </appender>

    <!--Set the log level with an environment variable `LOG_LEVEL`, defaults to DEBUG-->
    <variable name="LOG_LEVEL" value="${LOG_LEVEL:-DEBUG}" />

    <!--Logger exclusively for metrics-->
    <logger name="io.onema.userverless.monitoring.Metrics" >
        <appender-ref ref="METRIC" />
    </logger>

    <!--Root logger, uses LOG_LEVEL variable to set the desired level-->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="STDERR" />
    </root>
</configuration>
