<configuration>
    <appender name="METRIC" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{"type":"metric","stage":"${STAGE_NAME}","function":"${AWS_LAMBDA_FUNCTION_NAME}","lambda_version":"${AWS_LAMBDA_FUNCTION_VERSION}"}</customFields>
        </encoder>
    </appender>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <Target>System.out</Target>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{"type":"log","stage":"${STAGE_NAME}","function":"${AWS_LAMBDA_FUNCTION_NAME}","lambda_version":"${AWS_LAMBDA_FUNCTION_VERSION}"}</customFields>
        </encoder>
    </appender>
    <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
        <Target>System.err</Target>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>*** %-6level: %msg%n</pattern>
        </encoder>
    </appender>

    <logger name="io.onema.userverless.monitoring.Metrics" >
        <appender-ref ref="METRIC" />
    </logger>
    <root level="DEBUG">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="STDERR" />
    </root>
</configuration>
